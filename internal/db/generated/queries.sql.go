// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: queries.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const addMail = `-- name: AddMail :exec
INSERT INTO mail (mail_id, date, addr_from, addr_to, body)
VALUES ($1, $2, $3, $4, $5)
ON CONFLICT (mail_id) DO NOTHING
`

type AddMailParams struct {
	MailID   pgtype.Text
	Date     pgtype.Timestamp
	AddrFrom pgtype.Text
	AddrTo   pgtype.Text
	Body     pgtype.Text
}

func (q *Queries) AddMail(ctx context.Context, arg AddMailParams) error {
	_, err := q.db.Exec(ctx, addMail,
		arg.MailID,
		arg.Date,
		arg.AddrFrom,
		arg.AddrTo,
		arg.Body,
	)
	return err
}

const getMail = `-- name: GetMail :one
SELECT id, mail_id, date, addr_from, addr_to, body, messages, last_message_extraction, reply_to, thread FROM mail
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetMail(ctx context.Context, id int64) (Mail, error) {
	row := q.db.QueryRow(ctx, getMail, id)
	var i Mail
	err := row.Scan(
		&i.ID,
		&i.MailID,
		&i.Date,
		&i.AddrFrom,
		&i.AddrTo,
		&i.Body,
		&i.Messages,
		&i.LastMessageExtraction,
		&i.ReplyTo,
		&i.Thread,
	)
	return i, err
}

const mailCount = `-- name: MailCount :one
SELECT COUNT(*) FROM mail
`

func (q *Queries) MailCount(ctx context.Context) (int64, error) {
	row := q.db.QueryRow(ctx, mailCount)
	var count int64
	err := row.Scan(&count)
	return count, err
}
